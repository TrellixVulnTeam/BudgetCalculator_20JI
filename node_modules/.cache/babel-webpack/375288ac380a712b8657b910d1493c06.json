{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nconst babel_loader_1 = require(\"babel-loader\");\n\nconst typescript_1 = require(\"typescript\");\n/**\n * Cached linker check utility function\n *\n * If undefined, not yet been imported\n * If null, attempted import failed and no linker support\n * If function, import succeeded and linker supported\n */\n\n\nlet needsLinking;\n\nasync function checkLinking(path, source) {\n  // @angular/core and @angular/compiler will cause false positives\n  if (/[\\\\\\/]@angular[\\\\\\/](?:compiler|core)/.test(path)) {\n    return {\n      requiresLinking: false\n    };\n  }\n\n  if (needsLinking !== null) {\n    try {\n      if (needsLinking === undefined) {\n        needsLinking = (await Promise.resolve().then(() => require('@angular/compiler-cli/linker'))).needsLinking;\n      } // If the linker entry point is present then there is linker support\n\n\n      return {\n        hasLinkerSupport: true,\n        requiresLinking: needsLinking(path, source)\n      };\n    } catch (_a) {\n      needsLinking = null;\n    }\n  } // Fallback for Angular versions less than 11.1.0 with no linker support.\n  // This information is used to issue errors if a partially compiled library is used when unsupported.\n\n\n  return {\n    hasLinkerSupport: false,\n    requiresLinking: source.includes('ɵɵngDeclareDirective') || source.includes('ɵɵngDeclareComponent')\n  };\n}\n\nexports.default = babel_loader_1.custom(() => {\n  const baseOptions = Object.freeze({\n    babelrc: false,\n    configFile: false,\n    compact: false,\n    cacheCompression: false,\n    sourceType: 'unambiguous'\n  });\n  return {\n    async customOptions({\n      scriptTarget,\n      ...loaderOptions\n    }, {\n      source\n    }) {\n      // Must process file if plugins are added\n      let shouldProcess = Array.isArray(loaderOptions.plugins) && loaderOptions.plugins.length > 0; // Analyze file for linking\n\n      let shouldLink = false;\n      const {\n        hasLinkerSupport,\n        requiresLinking\n      } = await checkLinking(this.resourcePath, source);\n\n      if (requiresLinking && !hasLinkerSupport) {\n        // Cannot link if there is no linker support\n        this.emitError('File requires the Angular linker. \"@angular/compiler-cli\" version 11.1.0 or greater is needed.');\n      } else {\n        shouldLink = requiresLinking;\n      }\n\n      shouldProcess || (shouldProcess = shouldLink); // Analyze for ES target processing\n\n      let forceES5 = false;\n      const esTarget = scriptTarget;\n\n      if (esTarget < typescript_1.ScriptTarget.ES2015) {\n        forceES5 = true;\n      }\n\n      shouldProcess || (shouldProcess = forceES5); // Add provided loader options to default base options\n\n      const options = { ...baseOptions,\n        ...loaderOptions\n      }; // Skip babel processing if no actions are needed\n\n      if (!shouldProcess) {\n        // Force the current file to be ignored\n        options.ignore = [() => true];\n      }\n\n      return {\n        custom: {\n          forceES5,\n          shouldLink\n        },\n        loader: options\n      };\n    },\n\n    config(configuration, {\n      customOptions\n    }) {\n      return { ...configuration.options,\n        presets: [...(configuration.options.presets || []), [require('./presets/application').default, {\n          angularLinker: customOptions.shouldLink,\n          forceES5: customOptions.forceES5,\n          diagnosticReporter: (type, message) => {\n            switch (type) {\n              case 'error':\n                this.emitError(message);\n                break;\n\n              case 'info': // Webpack does not currently have an informational diagnostic\n\n              case 'warning':\n                this.emitWarning(message);\n                break;\n            }\n          }\n        }]]\n      };\n    }\n\n  };\n});","map":{"version":3,"sources":["/Users/vic/Desktop/Programming/Angular/BudgetCalculator/node_modules/@angular-devkit/build-angular/src/babel/webpack-loader.js"],"names":["Object","defineProperty","exports","value","babel_loader_1","require","typescript_1","needsLinking","checkLinking","path","source","test","requiresLinking","undefined","Promise","resolve","then","hasLinkerSupport","_a","includes","default","custom","baseOptions","freeze","babelrc","configFile","compact","cacheCompression","sourceType","customOptions","scriptTarget","loaderOptions","shouldProcess","Array","isArray","plugins","length","shouldLink","resourcePath","emitError","forceES5","esTarget","ScriptTarget","ES2015","options","ignore","loader","config","configuration","presets","angularLinker","diagnosticReporter","type","message","emitWarning"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst babel_loader_1 = require(\"babel-loader\");\nconst typescript_1 = require(\"typescript\");\n/**\n * Cached linker check utility function\n *\n * If undefined, not yet been imported\n * If null, attempted import failed and no linker support\n * If function, import succeeded and linker supported\n */\nlet needsLinking;\nasync function checkLinking(path, source) {\n    // @angular/core and @angular/compiler will cause false positives\n    if (/[\\\\\\/]@angular[\\\\\\/](?:compiler|core)/.test(path)) {\n        return { requiresLinking: false };\n    }\n    if (needsLinking !== null) {\n        try {\n            if (needsLinking === undefined) {\n                needsLinking = (await Promise.resolve().then(() => require('@angular/compiler-cli/linker'))).needsLinking;\n            }\n            // If the linker entry point is present then there is linker support\n            return { hasLinkerSupport: true, requiresLinking: needsLinking(path, source) };\n        }\n        catch (_a) {\n            needsLinking = null;\n        }\n    }\n    // Fallback for Angular versions less than 11.1.0 with no linker support.\n    // This information is used to issue errors if a partially compiled library is used when unsupported.\n    return {\n        hasLinkerSupport: false,\n        requiresLinking: source.includes('ɵɵngDeclareDirective') || source.includes('ɵɵngDeclareComponent'),\n    };\n}\nexports.default = babel_loader_1.custom(() => {\n    const baseOptions = Object.freeze({\n        babelrc: false,\n        configFile: false,\n        compact: false,\n        cacheCompression: false,\n        sourceType: 'unambiguous',\n    });\n    return {\n        async customOptions({ scriptTarget, ...loaderOptions }, { source }) {\n            // Must process file if plugins are added\n            let shouldProcess = Array.isArray(loaderOptions.plugins) && loaderOptions.plugins.length > 0;\n            // Analyze file for linking\n            let shouldLink = false;\n            const { hasLinkerSupport, requiresLinking } = await checkLinking(this.resourcePath, source);\n            if (requiresLinking && !hasLinkerSupport) {\n                // Cannot link if there is no linker support\n                this.emitError('File requires the Angular linker. \"@angular/compiler-cli\" version 11.1.0 or greater is needed.');\n            }\n            else {\n                shouldLink = requiresLinking;\n            }\n            shouldProcess || (shouldProcess = shouldLink);\n            // Analyze for ES target processing\n            let forceES5 = false;\n            const esTarget = scriptTarget;\n            if (esTarget < typescript_1.ScriptTarget.ES2015) {\n                forceES5 = true;\n            }\n            shouldProcess || (shouldProcess = forceES5);\n            // Add provided loader options to default base options\n            const options = {\n                ...baseOptions,\n                ...loaderOptions,\n            };\n            // Skip babel processing if no actions are needed\n            if (!shouldProcess) {\n                // Force the current file to be ignored\n                options.ignore = [() => true];\n            }\n            return { custom: { forceES5, shouldLink }, loader: options };\n        },\n        config(configuration, { customOptions }) {\n            return {\n                ...configuration.options,\n                presets: [\n                    ...(configuration.options.presets || []),\n                    [\n                        require('./presets/application').default,\n                        {\n                            angularLinker: customOptions.shouldLink,\n                            forceES5: customOptions.forceES5,\n                            diagnosticReporter: (type, message) => {\n                                switch (type) {\n                                    case 'error':\n                                        this.emitError(message);\n                                        break;\n                                    case 'info':\n                                    // Webpack does not currently have an informational diagnostic\n                                    case 'warning':\n                                        this.emitWarning(message);\n                                        break;\n                                }\n                            },\n                        },\n                    ],\n                ],\n            };\n        },\n    };\n});\n"]},"metadata":{},"sourceType":"script"}